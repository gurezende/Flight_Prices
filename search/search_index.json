{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Flight Prices Project \ud83d\udeea Gathering airline ticket fares in a SQL DB. For the full code visit the repository Flight Prices in GitHub . Project Layout flowchart LR subgraph Webscraping direction TB Internet[/Browse\\nAirline\\nCompany\\nWebsite/] end subgraph Structuring-Data direction TB Scrape(Scrape Data\\nwith\\nBeautifulSoup ) --> Parsing(Parse Data\\nfrom HTML) end subgraph Saving-to-DB direction TB File[[CSV File\\nsaved to .data]] --> DB[(Structured Table\\n saved to\\n SQLite DB)] style DB fill: #ababfd end subgraph Send-Message Message[/Message\\nsent via\\nWeb WhatsApp/] style Message fill:#90EE90 end Webscraping --> Structuring-Data --> Saving-to-DB --> Send-Message Problem and Description This project was created to fulfill the problem of getting flight ticket prices on a weekly basis for a future study about how the prices behave thoughout an year. So, the scripts will: Navigate to the airline company website and get flight ticket fares for the given date. Scrape the results This was accomplished with Selenium . Parse departure and arrival city, time and date, flight length, number of stops and ticket price. Done with BeautifulSoup . Store the structured data in a SQL DB Stored in SQLite 3 . Send a message via WhatsApp with the flight with the lowest price and the average price of the flights for that date. Done with pywhatkit . Notes All the prices are in BRL (Brazilian Real) The flight length is in hours. Python Version This project was created with Python 3.12.1 . Requirements uv >= 0.5.1 bs4 >= 0.0.2 mkdocs >= 1.6.1 mkdocstrings-python >= 1.12.2 mkdocs-mermaid2-plugin >= 1.2.1 numpy >= 2.1.3 polars >= 1.16.0 pywhatkit >= 5.4 requests >= 2.32.3 selenium >= 4.27.1 You need Google Chome browser to run this project.","title":"Home"},{"location":"#flight-prices-project","text":"Gathering airline ticket fares in a SQL DB. For the full code visit the repository Flight Prices in GitHub .","title":"Flight Prices Project \ud83d\udeea"},{"location":"#project-layout","text":"flowchart LR subgraph Webscraping direction TB Internet[/Browse\\nAirline\\nCompany\\nWebsite/] end subgraph Structuring-Data direction TB Scrape(Scrape Data\\nwith\\nBeautifulSoup ) --> Parsing(Parse Data\\nfrom HTML) end subgraph Saving-to-DB direction TB File[[CSV File\\nsaved to .data]] --> DB[(Structured Table\\n saved to\\n SQLite DB)] style DB fill: #ababfd end subgraph Send-Message Message[/Message\\nsent via\\nWeb WhatsApp/] style Message fill:#90EE90 end Webscraping --> Structuring-Data --> Saving-to-DB --> Send-Message","title":"Project Layout"},{"location":"#problem-and-description","text":"This project was created to fulfill the problem of getting flight ticket prices on a weekly basis for a future study about how the prices behave thoughout an year. So, the scripts will: Navigate to the airline company website and get flight ticket fares for the given date. Scrape the results This was accomplished with Selenium . Parse departure and arrival city, time and date, flight length, number of stops and ticket price. Done with BeautifulSoup . Store the structured data in a SQL DB Stored in SQLite 3 . Send a message via WhatsApp with the flight with the lowest price and the average price of the flights for that date. Done with pywhatkit .","title":"Problem and Description"},{"location":"#notes","text":"All the prices are in BRL (Brazilian Real) The flight length is in hours.","title":"Notes"},{"location":"#python-version","text":"This project was created with Python 3.12.1 .","title":"Python Version"},{"location":"#requirements","text":"uv >= 0.5.1 bs4 >= 0.0.2 mkdocs >= 1.6.1 mkdocstrings-python >= 1.12.2 mkdocs-mermaid2-plugin >= 1.2.1 numpy >= 2.1.3 polars >= 1.16.0 pywhatkit >= 5.4 requests >= 2.32.3 selenium >= 4.27.1 You need Google Chome browser to run this project.","title":"Requirements"},{"location":"about/","text":"About This project was developed by Gustavo R Santos . License Project licensed under Creative Commons 4.0 BY . Contact To know more about me, visit my website. https://gustavorsantos.me","title":"About"},{"location":"about/#about","text":"This project was developed by Gustavo R Santos .","title":"About"},{"location":"about/#license","text":"Project licensed under Creative Commons 4.0 BY .","title":"License"},{"location":"about/#contact","text":"To know more about me, visit my website.","title":"Contact"},{"location":"about/#httpsgustavorsantosme","text":"","title":"https://gustavorsantos.me"},{"location":"functions/","text":"Scripts and Functions Scripts webscraping.py : Browses the website of the airline company and scrape the results. parser_final.py : parses the hmtl of the results to extract information. departure date, city, time arrival city, time flight length (in hours), number of stops ticket prices (in BRL) load_sql.py : Loads the resulting structured table to a SQLite3 database. whatsapp.py : Sends a message with the cheapest flight and average ticket fare for the selected date. flight_prices.py : Main script to organize and call the previous in order. CompareFares.py : Final script to enable choosing origin and destin cities and number of days from the current date to fetch results. flowchart LR subgraph CompareFares.py direction LR style CompareFares.py fill: #999DA0, stroke:#000 subgraph flight_prices.py direction LR style flight_prices.py fill: #e5e5e5, stroke:#000 subgraph Webscraping Internet[/webscraping.py/] end subgraph Structuring-Data Scrape(parser_final.py) end subgraph Saving-to-DB direction TB Load[[load_sql.py]] --> DB[(SQLite DB)] style DB fill: #ababfd end subgraph Send-Message Message[/whatsApp.py/] style Message fill:#90EE90 end end end Webscraping --> Structuring-Data --> Saving-to-DB --> Send-Message Output Example The expected outputs are as follows. [.csv] file with the flight prices will be the output of the load_sql script. The table will be loaded to a relational database. dt depart_city depart_time city_arrival time_arrival flight_numbers n_stops flight_lengths ticket_prices days_before_flight 28/12 FLL 18:30 VCP \"04:45\" Voo 8705 Direto 8.25 12510 22 28/12 MCO 19:00 VCP \"05:35\" Voo 8707 Direto 8.58 4463 22 28/12 FLL 22:30 VCP \"08:45\" Voo 9305 Direto 8.25 2203 22 28/12 FLL 15:30 VCP \"07:20\" Voo 8723 1 conex 13.8 3845 22 28/12 FLL 20:30 VCP \"09:15\" Voo 8733 1 conex 10.75 2768 22 28/12 FLL 20:30 VCP \"11:40\" Voo 8733 1 conex 13.2 0 22 28/12 FLL 20:30 VCP \"18:00\" Voo 8733 1 conex 19.5 2768 22 28/12 FLL 20:30 VCP \"19:00\" Voo 8733 1 conex 20.5 2768 22 VCP 10:15 MCO \"17:00\" Voo 8706 Direto 8.75 0 22 VCP 11:05 FLL \"17:30\" Voo 8702 Direto 8.4 13711 22 After processed, the data table that follows is transformed into a dictionary and sent as text message via WhatsApp. The script performing this task is whatsapp.py . dt depart_city city_arrival n_stops flight_lengths MIN_PRICE AVG_PRICE 28/12/2024 FLL VCP Direto 8.25 2203.0 4475.0 Functions This is the main function code in the script flight_prices.py . This function runs the main script that controls the webscraping, parsing, load to SQL and message. - INPUTS: * d: int = How many days ahead from today do you want to search flights * origin_cd: str = Flight origin city code * destin_cd: str = Flight destin city code Source code in scripts\\flight_prices.py def get_flight_prices(d, origin_cd='ZFF', destin_cd='VCP'): ''' This function runs the main script that controls the webscraping, parsing, load to SQL and message. - INPUTS: * d: int = How many days ahead from today do you want to search flights * origin_cd: str = Flight origin city code * destin_cd: str = Flight destin city code ''' # Date to search search_date = get_date(add_days=d) print(f'\\n >> Searching flights on {search_date} <<') # Get Flights page get_flights(depart=origin_cd, arrivl=destin_cd, date_depart= search_date, days_range= 5) # Open HTML file soup = open_file('.data/flights.html') # Find departures departures = soup.find_all(\"div\", class_=\"flight-card__info left-container css-vjjku5\") # Creating lists to store the values from the text dt = [] #flight date depart_city = [] #city departure depart_time = [] #departure times city_arrival = [] #city arrival time_arrival = [] #arrival times flight_numbers = [] #flight numbers n_stops = [] # qty of stops flight_lengths = [] # length in hours ticket_prices = [] #ticket prices for element in departures: # Extract departure data departure_city, departure_date, departure_time = departure_information(element=element) # Append to list depart_city.append(departure_city) dt.append(departure_date) depart_time.append(departure_time) # Extract arrival data arrival_city, arrival_time = arrival_information(element=element) # Append to list city_arrival.append(arrival_city) time_arrival.append(arrival_time) # Extract flight data flight_number, stops, hours_length = flight_information(element=element) # Append to list flight_numbers.append(flight_number) n_stops.append(stops) flight_lengths.append(hours_length) # Extract ticket Prices data ticket_prices = prices_information(soup) # IF ticket prices are not matching the other add 0. while len(ticket_prices) < len(dt): ticket_prices.append('0') # First match of the search is usually a \"same-day flight\". # Make the date equal to the second entry dt[0] = dt[1] # Build DataFrame dtf_flights = pl.DataFrame({ 'dt': dt, 'depart_city': depart_city, 'depart_time': depart_time, 'city_arrival': city_arrival, 'time_arrival': time_arrival, 'flight_numbers': flight_numbers, 'n_stops': n_stops, 'flight_lengths': flight_lengths, 'ticket_prices': ticket_prices, 'days_before_flight': [str(d)] * len(dt) }).select(pl.all().backward_fill()) print(dtf_flights) # Save data as a table dtf_flights.write_csv('.data/flights.csv') # # Load to SQL load_to_sql(flight_date= search_date) # Origin codes must bring all city codes fetched origin_codes = str( tuple(set(dtf_flights['depart_city'])) ) # Send Whatsapp Message send_message(search_date, origin_cd=origin_codes)","title":"Scripts"},{"location":"functions/#scripts-and-functions","text":"","title":"Scripts and Functions"},{"location":"functions/#scripts","text":"webscraping.py : Browses the website of the airline company and scrape the results. parser_final.py : parses the hmtl of the results to extract information. departure date, city, time arrival city, time flight length (in hours), number of stops ticket prices (in BRL) load_sql.py : Loads the resulting structured table to a SQLite3 database. whatsapp.py : Sends a message with the cheapest flight and average ticket fare for the selected date. flight_prices.py : Main script to organize and call the previous in order. CompareFares.py : Final script to enable choosing origin and destin cities and number of days from the current date to fetch results. flowchart LR subgraph CompareFares.py direction LR style CompareFares.py fill: #999DA0, stroke:#000 subgraph flight_prices.py direction LR style flight_prices.py fill: #e5e5e5, stroke:#000 subgraph Webscraping Internet[/webscraping.py/] end subgraph Structuring-Data Scrape(parser_final.py) end subgraph Saving-to-DB direction TB Load[[load_sql.py]] --> DB[(SQLite DB)] style DB fill: #ababfd end subgraph Send-Message Message[/whatsApp.py/] style Message fill:#90EE90 end end end Webscraping --> Structuring-Data --> Saving-to-DB --> Send-Message","title":"Scripts"},{"location":"functions/#output-example","text":"The expected outputs are as follows. [.csv] file with the flight prices will be the output of the load_sql script. The table will be loaded to a relational database. dt depart_city depart_time city_arrival time_arrival flight_numbers n_stops flight_lengths ticket_prices days_before_flight 28/12 FLL 18:30 VCP \"04:45\" Voo 8705 Direto 8.25 12510 22 28/12 MCO 19:00 VCP \"05:35\" Voo 8707 Direto 8.58 4463 22 28/12 FLL 22:30 VCP \"08:45\" Voo 9305 Direto 8.25 2203 22 28/12 FLL 15:30 VCP \"07:20\" Voo 8723 1 conex 13.8 3845 22 28/12 FLL 20:30 VCP \"09:15\" Voo 8733 1 conex 10.75 2768 22 28/12 FLL 20:30 VCP \"11:40\" Voo 8733 1 conex 13.2 0 22 28/12 FLL 20:30 VCP \"18:00\" Voo 8733 1 conex 19.5 2768 22 28/12 FLL 20:30 VCP \"19:00\" Voo 8733 1 conex 20.5 2768 22 VCP 10:15 MCO \"17:00\" Voo 8706 Direto 8.75 0 22 VCP 11:05 FLL \"17:30\" Voo 8702 Direto 8.4 13711 22 After processed, the data table that follows is transformed into a dictionary and sent as text message via WhatsApp. The script performing this task is whatsapp.py . dt depart_city city_arrival n_stops flight_lengths MIN_PRICE AVG_PRICE 28/12/2024 FLL VCP Direto 8.25 2203.0 4475.0","title":"Output Example"},{"location":"functions/#functions","text":"This is the main function code in the script flight_prices.py . This function runs the main script that controls the webscraping, parsing, load to SQL and message. - INPUTS: * d: int = How many days ahead from today do you want to search flights * origin_cd: str = Flight origin city code * destin_cd: str = Flight destin city code Source code in scripts\\flight_prices.py def get_flight_prices(d, origin_cd='ZFF', destin_cd='VCP'): ''' This function runs the main script that controls the webscraping, parsing, load to SQL and message. - INPUTS: * d: int = How many days ahead from today do you want to search flights * origin_cd: str = Flight origin city code * destin_cd: str = Flight destin city code ''' # Date to search search_date = get_date(add_days=d) print(f'\\n >> Searching flights on {search_date} <<') # Get Flights page get_flights(depart=origin_cd, arrivl=destin_cd, date_depart= search_date, days_range= 5) # Open HTML file soup = open_file('.data/flights.html') # Find departures departures = soup.find_all(\"div\", class_=\"flight-card__info left-container css-vjjku5\") # Creating lists to store the values from the text dt = [] #flight date depart_city = [] #city departure depart_time = [] #departure times city_arrival = [] #city arrival time_arrival = [] #arrival times flight_numbers = [] #flight numbers n_stops = [] # qty of stops flight_lengths = [] # length in hours ticket_prices = [] #ticket prices for element in departures: # Extract departure data departure_city, departure_date, departure_time = departure_information(element=element) # Append to list depart_city.append(departure_city) dt.append(departure_date) depart_time.append(departure_time) # Extract arrival data arrival_city, arrival_time = arrival_information(element=element) # Append to list city_arrival.append(arrival_city) time_arrival.append(arrival_time) # Extract flight data flight_number, stops, hours_length = flight_information(element=element) # Append to list flight_numbers.append(flight_number) n_stops.append(stops) flight_lengths.append(hours_length) # Extract ticket Prices data ticket_prices = prices_information(soup) # IF ticket prices are not matching the other add 0. while len(ticket_prices) < len(dt): ticket_prices.append('0') # First match of the search is usually a \"same-day flight\". # Make the date equal to the second entry dt[0] = dt[1] # Build DataFrame dtf_flights = pl.DataFrame({ 'dt': dt, 'depart_city': depart_city, 'depart_time': depart_time, 'city_arrival': city_arrival, 'time_arrival': time_arrival, 'flight_numbers': flight_numbers, 'n_stops': n_stops, 'flight_lengths': flight_lengths, 'ticket_prices': ticket_prices, 'days_before_flight': [str(d)] * len(dt) }).select(pl.all().backward_fill()) print(dtf_flights) # Save data as a table dtf_flights.write_csv('.data/flights.csv') # # Load to SQL load_to_sql(flight_date= search_date) # Origin codes must bring all city codes fetched origin_codes = str( tuple(set(dtf_flights['depart_city'])) ) # Send Whatsapp Message send_message(search_date, origin_cd=origin_codes)","title":"Functions"},{"location":"installation/","text":"Installation 1 To run this project, first create a virtual environment. I used the module uv for that. Install all the modules displayed in the Requirements Section . Here is an example on how to create a new virtual environment using the terminal. # Install UV pip install uv # Start a new virtual project uv init flightprices # Start a new virtual environment uv venv --python 3.12.1 # add the Modules uv add <module_name> 2 Create a file secure.py within the folder scripts . Add just this line of code with a string of your phone number. phone = '+12345678901' Go to the Web WhatsApp Site and connect your phone to receive the messages, otherwise the script will break. 3 Next open the script CompareFares.py . This Python script controls a loop where you should input in the [list] of how many days ahead of today you want to search flights. The numbers suggested are [10, 30, 60, 90] . For the get_flights() function, add: origin_cd : the code of the flight origin destin_cd : the code of the flight destin. Run the script and wait for completion. You will see the messages on the terminal prompt of your IDE.","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#1","text":"To run this project, first create a virtual environment. I used the module uv for that. Install all the modules displayed in the Requirements Section . Here is an example on how to create a new virtual environment using the terminal. # Install UV pip install uv # Start a new virtual project uv init flightprices # Start a new virtual environment uv venv --python 3.12.1 # add the Modules uv add <module_name>","title":"1"},{"location":"installation/#2","text":"Create a file secure.py within the folder scripts . Add just this line of code with a string of your phone number. phone = '+12345678901' Go to the Web WhatsApp Site and connect your phone to receive the messages, otherwise the script will break.","title":"2"},{"location":"installation/#3","text":"Next open the script CompareFares.py . This Python script controls a loop where you should input in the [list] of how many days ahead of today you want to search flights. The numbers suggested are [10, 30, 60, 90] . For the get_flights() function, add: origin_cd : the code of the flight origin destin_cd : the code of the flight destin. Run the script and wait for completion. You will see the messages on the terminal prompt of your IDE.","title":"3"}]}